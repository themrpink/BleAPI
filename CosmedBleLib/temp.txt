
        public async Task StartConnectionAsync()
        {
            GattDeviceServicesResult result;

            //vedere cosa fanno questi
            //public IAsyncOperation<DeviceAccessStatus> RequestAccessAsync();
            //public IAsyncOperation<GattDeviceServicesResult> GetGattServicesAsync(BluetoothCacheMode cacheMode);
            
            
                try
                {
                    DeviceAccessStatus das = await bluetoothLeDevice.RequestAccessAsync();
                    Console.WriteLine("device access status1: " + das);
                    result = await bluetoothLeDevice.GetGattServicesAsync().AsTask();
                    das = await bluetoothLeDevice.RequestAccessAsync();

                    if (result.Status == GattCommunicationStatus.Success)
                    {

                        IReadOnlyList<GattDeviceService> resultServices = result.Services;
                        Console.WriteLine("iterating the services");



                        foreach (var service in resultServices)
                        {
                            Console.WriteLine("printing a service:");
                            Console.WriteLine("service handle: " + service.AttributeHandle.ToString("X2"));
                            Console.WriteLine("service uuid: " + service.Uuid.ToString());
                            Console.WriteLine("service device access information (current status): " + service.DeviceAccessInformation.CurrentStatus.ToString());
                            Console.WriteLine("service Gatt Session: " + service.Session);
    

                            //GattCharacteristicsResult resultCharacteristics = await service.GetCharacteristicsAsync().AsTask();
                            GattCharacteristicsResult resultCharacteristics = await service.GetCharacteristicsAsync().AsTask().ConfigureAwait(false);

                            if (resultCharacteristics.Status == GattCommunicationStatus.Success)
                            {
                                Console.WriteLine("iterating the characteristics:");
                                IReadOnlyList<GattCharacteristic> characteristics = resultCharacteristics.Characteristics;
                                int i = characteristics.Count;

                                foreach (GattCharacteristic characteristic in characteristics)
                                {
                                    Console.WriteLine("Characteristic, user description: " + characteristic.UserDescription);
                                    Console.WriteLine("UUID: " + characteristic.Uuid.ToString());
                                    Console.WriteLine("Attribute handle: " + characteristic.AttributeHandle.ToString("X2"));
                                    Console.WriteLine("Protection level: " + characteristic.ProtectionLevel.ToString());
                                    Console.WriteLine("Properties: " + characteristic.CharacteristicProperties.ToString());

                                    foreach (var pf in characteristic.PresentationFormats)
                                    {
                                        Console.WriteLine(" - Presentation format - ");
                                        Console.WriteLine("Description" + pf.Description);
                                        Console.WriteLine("" + pf.FormatType.ToString("X2"));
                                        Console.WriteLine("Unit: " + pf.Unit);
                                        Console.WriteLine("Exponent: " + pf.Exponent);
                                        Console.WriteLine("Namespace" + pf.Namespace.ToString("X2"));
                                        Console.WriteLine();
                                    }

                                    GattDescriptorsResult descriptors = null;
                                    try
                                    {
                                        //var descriptors = await characteristic.GetDescriptorsAsync().AsTask();
                                        descriptors = await characteristic.GetDescriptorsAsync().AsTask().ConfigureAwait(false);
                                    }
                                    catch (AggregateException ae)
                                    {
                                        ae.Handle((x) =>
                                        {
                                            if (x is System.ObjectDisposedException)
                                            {
                                                //'L'oggetto è stato chiuso. (Eccezione da HRESULT: 0x80000013)'
                                                return true;
                                            }
                                            else
                                            {
                                                Console.WriteLine(ae.InnerException.Message);
                                            }
                                            return false; 
                                        });

                                    }

                                    Console.WriteLine(" - descriptors - ");

                                    foreach (var descriptor in descriptors?.Descriptors)
                                    {
                                        Console.WriteLine("protection level: " + descriptor.ProtectionLevel);
                                        Console.WriteLine("Uuid: " + descriptor.Uuid.ToString());
                                        Console.WriteLine("Attribute Handler" + descriptor.AttributeHandle.ToString("X2"));
                                    }

                                    Console.WriteLine("Status: " + descriptors?.Status.ToString());

                                    if (descriptors?.ProtocolError != null)
                                    {
                                        Console.WriteLine("Protocol error: " + descriptors?.ProtocolError.Value.ToString("X2"));
                                    }

                                    //Task t = CharacteristicCommunication(characteristic, result);
                                    var t = CharacteristicCommunication(characteristic, result).ConfigureAwait(false);
                                    try
                                    {
                                        await t;
                                    }
                                    catch (AggregateException ae)
                                    {
                                        Console.WriteLine("Caught aggregate exception-Task.Wait behavior");
                                        ae.Handle((x) =>
                                        {
                                            if (x is UnauthorizedAccessException) // This we know how to handle.
                                            {
                                                Console.WriteLine("You do not have permission to access all folders in this path.");
                                                Console.WriteLine("See your network administrator or try another path.");
                                                return true;
                                            }
                                            else
                                            {
                                                Console.WriteLine(ae.InnerException.Message);
                                            }
                                            return false; // Let anything else stop the application.
                                        });
                                    }
                                    catch (SystemException se)
                                    {
                                        Console.WriteLine(se.Message);
                                    }

                                }
                            }
                            else if (resultCharacteristics.Status == GattCommunicationStatus.ProtocolError)
                            {
                                Console.WriteLine("protocol error");
                            }
                            else
                            {
                                Console.WriteLine("protocol status: " + GattCommunicationStatus.AccessDenied.ToString() + " or " + GattCommunicationStatus.Unreachable.ToString());
                            }
                        }
                    }
                    else
                    {
                        var error = result.ProtocolError;
                    }

                }
                catch (Exception e)
                {
                    Console.WriteLine("exception: " + e.Message);
                    //non so come si comporta in seguito. Restiuisce un´eccezione?
                    await Task.FromException(e);
                }

        }
        private async Task CharacteristicCommunication(GattCharacteristic characteristic, GattDeviceServicesResult result)
        {
            GattCharacteristicProperties properties = characteristic.CharacteristicProperties;
            string advType = characteristic.Uuid.ToString();

            if (properties.HasFlag(GattCharacteristicProperties.Read))
            {
                // This characteristic supports reading from it.
                //GattReadResult value = await characteristic.ReadValueAsync().AsTask();
                GattReadResult value = await characteristic.ReadValueAsync().AsTask().ConfigureAwait(false);
                if (result.Status == GattCommunicationStatus.Success)
                {
                    CosmedGattCommunicationStatus newStatus = GattCharacteristicExtensions.ConvertStatus(value.Status);
                    CosmedCharacteristicReadResult grr = new CosmedCharacteristicReadResult(value.Value, newStatus, value.ProtocolError);

                    Console.WriteLine("characteristic buffer hex: " + grr.HexValue);
                    Console.WriteLine(advType + " characteristic buffer UTF8: " + grr.UTF8Value);
                    Console.WriteLine(advType + " characteristic buffer ASCII: " + grr.ASCIIValue);
                    Console.WriteLine(advType + " characteristic buffer UTF16: " + grr.UTF16Value);
                }
            }
            CosmedCharacteristicReadResult grr2 = new CosmedCharacteristicReadResult(null, CosmedGattCommunicationStatus.Success, null);
            if (properties.HasFlag(GattCharacteristicProperties.Write))
            {
                // This characteristic supports writing to it.
                var writer = new DataWriter();
                // WriteByte used for simplicity. Other common functions - WriteInt16 and WriteSingle
                writer.WriteByte(0x01);

                GattCommunicationStatus value = await characteristic.WriteValueAsync(writer.DetachBuffer()).AsTask().ConfigureAwait(false);
                //GattCommunicationStatus value = await characteristic.WriteValueAsync(writer.DetachBuffer());
                if (value == GattCommunicationStatus.Success)
                {
                    // Successfully wrote to device

                }

            }

            if (properties.HasFlag(GattCharacteristicProperties.Notify))
            {
                // This characteristic supports subscribing to notifications.
                //GattCommunicationStatus status = await characteristic.WriteClientCharacteristicConfigurationDescriptorAsync(GattClientCharacteristicConfigurationDescriptorValue.Notify).AsTask();
                GattCommunicationStatus status = await characteristic.WriteClientCharacteristicConfigurationDescriptorAsync(GattClientCharacteristicConfigurationDescriptorValue.Notify).AsTask().ConfigureAwait(false);

                if (status == GattCommunicationStatus.Success)
                {
                    // Server has been informed of clients interest.
                    characteristic.ValueChanged += Characteristic_ValueChanged;
                }

                void Characteristic_ValueChanged(GattCharacteristic sender, GattValueChangedEventArgs args)
                {
                    CharacteristicReader cr = new CharacteristicReader(args.CharacteristicValue, args.Timestamp, sender);
                    // An Indicate or Notify reported that the value has changed.

                    Console.WriteLine("characteristic buffer hex: " + cr.HexValue);
                }
            }

            if (properties.HasFlag(GattCharacteristicProperties.Indicate))
            {
                GattCommunicationStatus status = GattCommunicationStatus.Unreachable;
                try
                {
                    // This characteristic supports subscribing to notifications.
                    status = await characteristic.WriteClientCharacteristicConfigurationDescriptorAsync(GattClientCharacteristicConfigurationDescriptorValue.Notify).AsTask().ConfigureAwait(false);
                    //GattCommunicationStatus status = await characteristic.WriteClientCharacteristicConfigurationDescriptorAsync(GattClientCharacteristicConfigurationDescriptorValue.Indicate);
                    Console.WriteLine("indicate status: " + status.ToString() + ">>>>>>>>>>>>>>>>>>>>>>>>>>");
                }
                catch(Exception e)
                {
                    Console.WriteLine("error catched with characteristic: " +  characteristic.Uuid.ToString());
                    Console.WriteLine(e.Message);
                }
                if (status == GattCommunicationStatus.Success)
                {
                    // Server has been informed of clients interest.
                    characteristic.ValueChanged += Characteristic_ValueChanged;
                }

                void Characteristic_ValueChanged(GattCharacteristic sender, GattValueChangedEventArgs args)
                {
                    // An Indicate or Notify reported that the value has changed.
                    CharacteristicReader cr = new CharacteristicReader(args.CharacteristicValue, args.Timestamp, sender);
                    Console.WriteLine("characteristic buffer hex: " + cr.HexValue);
                }
            }
        }
